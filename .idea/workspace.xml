<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ChangeListManager">
    <list default="true" id="d55c277c-ccd8-42cb-bdf6-70a13f45272b" name="Default Changelist" comment="" />
    <ignored path="$PROJECT_DIR$/out/" />
    <option name="EXCLUDED_CONVERTED_TO_IGNORED" value="true" />
    <option name="SHOW_DIALOG" value="false" />
    <option name="HIGHLIGHT_CONFLICTS" value="true" />
    <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
    <option name="LAST_RESOLUTION" value="IGNORE" />
  </component>
  <component name="FileEditorManager">
    <leaf SIDE_TABS_SIZE_LIMIT_KEY="300">
      <file pinned="false" current-in-tab="true">
        <entry file="file://$PROJECT_DIR$/src/carolyn_tries_clojure/core.clj">
          <provider selected="true" editor-type-id="text-editor">
            <state relative-caret-position="204">
              <caret line="12" column="24" selection-start-line="12" selection-start-column="24" selection-end-line="12" selection-end-column="24" />
            </state>
          </provider>
        </entry>
      </file>
      <file pinned="false" current-in-tab="false">
        <entry file="file://$PROJECT_DIR$/test/carolyn_tries_clojure/core_test.clj">
          <provider selected="true" editor-type-id="text-editor">
            <state relative-caret-position="68">
              <caret line="4" lean-forward="true" selection-start-line="4" selection-end-line="4" />
            </state>
          </provider>
        </entry>
      </file>
      <file pinned="false" current-in-tab="false">
        <entry file="jar://$MAVEN_REPOSITORY$/org/clojure/clojure/1.10.0/clojure-1.10.0.jar!/clojure/main.class">
          <provider selected="true" editor-type-id="text-editor">
            <state relative-caret-position="344">
              <caret line="33" selection-start-line="33" selection-end-line="33" />
            </state>
          </provider>
        </entry>
      </file>
      <file pinned="false" current-in-tab="false">
        <entry file="file://$PROJECT_DIR$/project.clj">
          <provider selected="true" editor-type-id="text-editor">
            <state relative-caret-position="136">
              <caret line="8" column="35" lean-forward="true" selection-start-line="8" selection-start-column="35" selection-end-line="8" selection-end-column="35" />
            </state>
          </provider>
        </entry>
      </file>
      <file pinned="false" current-in-tab="false">
        <entry file="file://$PROJECT_DIR$/README.md">
          <provider selected="true" editor-type-id="split-provider[text-editor;markdown-preview-editor]">
            <state split_layout="SPLIT">
              <first_editor relative-caret-position="221">
                <caret line="13" lean-forward="true" selection-start-line="13" selection-end-line="13" />
              </first_editor>
              <second_editor />
            </state>
          </provider>
        </entry>
      </file>
    </leaf>
  </component>
  <component name="IdeDocumentHistory">
    <option name="CHANGED_PATHS">
      <list>
        <option value="$PROJECT_DIR$/src/carolyn_tries_clojure/test.clj" />
        <option value="$PROJECT_DIR$/test/carolyn_tries_clojure/core_test.clj" />
        <option value="$PROJECT_DIR$/src/carolyn_tries_clojure/core.clj" />
      </list>
    </option>
  </component>
  <component name="ProjectFrameBounds" extendedState="6">
    <option name="x" value="-1" />
    <option name="y" value="-11" />
    <option name="width" value="1922" />
    <option name="height" value="1092" />
  </component>
  <component name="ProjectView">
    <navigator proportions="" version="1">
      <foldersAlwaysOnTop value="true" />
    </navigator>
    <panes>
      <pane id="ProjectPane">
        <subPane>
          <expand>
            <path>
              <item name="carolyn-tries-clojure" type="b2602c69:ProjectViewProjectNode" />
              <item name="carolyn-tries-clojure" type="462c0819:PsiDirectoryNode" />
            </path>
            <path>
              <item name="carolyn-tries-clojure" type="b2602c69:ProjectViewProjectNode" />
              <item name="carolyn-tries-clojure" type="462c0819:PsiDirectoryNode" />
              <item name="src" type="462c0819:PsiDirectoryNode" />
            </path>
            <path>
              <item name="carolyn-tries-clojure" type="b2602c69:ProjectViewProjectNode" />
              <item name="carolyn-tries-clojure" type="462c0819:PsiDirectoryNode" />
              <item name="src" type="462c0819:PsiDirectoryNode" />
              <item name="carolyn_tries_clojure" type="462c0819:PsiDirectoryNode" />
            </path>
            <path>
              <item name="carolyn-tries-clojure" type="b2602c69:ProjectViewProjectNode" />
              <item name="carolyn-tries-clojure" type="462c0819:PsiDirectoryNode" />
              <item name="test" type="462c0819:PsiDirectoryNode" />
            </path>
            <path>
              <item name="carolyn-tries-clojure" type="b2602c69:ProjectViewProjectNode" />
              <item name="carolyn-tries-clojure" type="462c0819:PsiDirectoryNode" />
              <item name="test" type="462c0819:PsiDirectoryNode" />
              <item name="carolyn_tries_clojure" type="462c0819:PsiDirectoryNode" />
            </path>
            <path>
              <item name="carolyn-tries-clojure" type="b2602c69:ProjectViewProjectNode" />
              <item name="External Libraries" type="cb654da1:ExternalLibrariesNode" />
            </path>
            <path>
              <item name="carolyn-tries-clojure" type="b2602c69:ProjectViewProjectNode" />
              <item name="External Libraries" type="cb654da1:ExternalLibrariesNode" />
              <item name="Leiningen: org.clojure/clojure:1.10.0" type="70bed36:NamedLibraryElementNode" />
            </path>
            <path>
              <item name="carolyn-tries-clojure" type="b2602c69:ProjectViewProjectNode" />
              <item name="External Libraries" type="cb654da1:ExternalLibrariesNode" />
              <item name="Leiningen: org.clojure/clojure:1.10.0" type="70bed36:NamedLibraryElementNode" />
              <item name="clojure-1.10.0.jar" type="462c0819:PsiDirectoryNode" />
            </path>
            <path>
              <item name="carolyn-tries-clojure" type="b2602c69:ProjectViewProjectNode" />
              <item name="External Libraries" type="cb654da1:ExternalLibrariesNode" />
              <item name="Leiningen: org.clojure/clojure:1.10.0" type="70bed36:NamedLibraryElementNode" />
              <item name="clojure-1.10.0.jar" type="462c0819:PsiDirectoryNode" />
              <item name="clojure" type="462c0819:PsiDirectoryNode" />
            </path>
          </expand>
          <select />
        </subPane>
      </pane>
      <pane id="Scope" />
      <pane id="PackagesPane" />
    </panes>
  </component>
  <component name="PropertiesComponent">
    <property name="aspect.path.notification.shown" value="true" />
    <property name="last_opened_file_path" value="$PROJECT_DIR$/project.clj" />
    <property name="nodejs_interpreter_path.stuck_in_default_project" value="undefined stuck path" />
    <property name="nodejs_npm_path_reset_for_default_project" value="true" />
  </component>
  <component name="RecentsManager">
    <key name="CopyFile.RECENT_KEYS">
      <recent name="$PROJECT_DIR$/src/carolyn_tries_clojure" />
    </key>
  </component>
  <component name="ReplState" timestamp="1553376788769">{:repl-history {:ide [], :local [{:command &quot;(sss (1 ((()))))&quot;, :offset 11, :ns &quot;carolyn-tries-clojure.core&quot;} {:command &quot;(* 3 4)&quot;, :offset 7, :ns &quot;carolyn-tries-clojure.core&quot;} {:command &quot;(+ 1 2)&quot;, :offset 7, :ns &quot;carolyn-tries-clojure.core&quot;} {:command &quot;1&quot;, :offset 1, :ns &quot;carolyn-tries-clojure.core&quot;} {:command &quot;\&quot;string\&quot;&quot;, :offset 8, :ns &quot;carolyn-tries-clojure.core&quot;} {:command &quot;[\&quot;z\&quot; \&quot;vector\&quot;]&quot;, :offset 14, :ns &quot;carolyn-tries-clojure.core&quot;} {:command &quot;[2 3 \&quot;x\&quot;]&quot;, :offset 9, :ns &quot;carolyn-tries-clojure.core&quot;} {:command &quot;(str \&quot;join\&quot; \&quot;together\&quot;)&quot;, :offset 23, :ns &quot;carolyn-tries-clojure.core&quot;} {:command &quot;(if true\n  \&quot;x\&quot;\n  \&quot;y\&quot;)&quot;, :offset 21, :ns &quot;carolyn-tries-clojure.core&quot;} {:command &quot;(if false\n  \&quot;this if true\&quot;\n  \&quot;this if false\&quot;)&quot;, :offset 45, :ns &quot;carolyn-tries-clojure.core&quot;} {:command &quot;(if false\n  \&quot;this if true\&quot;)&quot;, :offset 27, :ns &quot;carolyn-tries-clojure.core&quot;} {:command &quot;(if true\n  (do (prinln \&quot;hey hey\&quot;))\n  \&quot;this is the thing\&quot;)&quot;, :offset 57, :ns &quot;carolyn-tries-clojure.core&quot;} {:command &quot;(if true\n  (do (println \&quot;ccc\&quot;)\n      \&quot;this if true\&quot;)\n  (do (println \&quot;xxx\&quot;)\n      \&quot;this if false\&quot;)\n  )&quot;, :offset 101, :ns &quot;carolyn-tries-clojure.core&quot;} {:command &quot;(when true\n  (println \&quot;when true\&quot;)\n  \&quot;this when true\&quot;\n  )&quot;, :offset 57, :ns &quot;carolyn-tries-clojure.core&quot;} {:command &quot;(when false\n  (println \&quot;when true\&quot;)\n  \&quot;this when true\&quot;\n  )&quot;, :offset 58, :ns &quot;carolyn-tries-clojure.core&quot;} {:command &quot;(nil? nil)&quot;, :offset 10, :ns &quot;carolyn-tries-clojure.core&quot;} {:command &quot;(nil? xxx)&quot;, :offset 10, :ns &quot;carolyn-tries-clojure.core&quot;} {:command &quot;(nil? \&quot;xxx\&quot;)&quot;, :offset 7, :ns &quot;carolyn-tries-clojure.core&quot;} {:command &quot;(if \&quot;carolyn\&quot;\n  \&quot;carolyn evaluates as true\&quot;)&quot;, :offset 43, :ns &quot;carolyn-tries-clojure.core&quot;} {:command &quot;(if nil\n  \&quot;carolyn evaluates as true\&quot;)&quot;, :offset 7, :ns &quot;carolyn-tries-clojure.core&quot;} {:command &quot;(if false\n  \&quot;carolyn evaluates as true\&quot;)&quot;, :offset 9, :ns &quot;carolyn-tries-clojure.core&quot;} {:command &quot;(if nil\n  \&quot;carolyn evaluates as true\&quot;\n  \&quot;nil is false\&quot;)&quot;, :offset 53, :ns &quot;carolyn-tries-clojure.core&quot;} {:command &quot;(=1 1)&quot;, :offset 5, :ns &quot;carolyn-tries-clojure.core&quot;} {:command &quot;(= 1 1)&quot;, :offset 3, :ns &quot;carolyn-tries-clojure.core&quot;} {:command &quot;(= nil nil)&quot;, :offset 10, :ns &quot;carolyn-tries-clojure.core&quot;} {:command &quot;(= false nil)&quot;, :offset 12, :ns &quot;carolyn-tries-clojure.core&quot;} {:command &quot;(or false true \&quot;truth\&quot;)&quot;, :offset 21, :ns &quot;carolyn-tries-clojure.core&quot;} {:command &quot;(or false nil \&quot;truth\&quot;)&quot;, :offset 13, :ns &quot;carolyn-tries-clojure.core&quot;} {:command &quot;(or false nil \&quot;truth\&quot; \&quot;other\&quot;)&quot;, :offset 28, :ns &quot;carolyn-tries-clojure.core&quot;} {:command &quot;(or false false \&quot;truth\&quot; \&quot;other\&quot;)&quot;, :offset 15, :ns &quot;carolyn-tries-clojure.core&quot;} {:command &quot;(or false false)&quot;, :offset 15, :ns &quot;carolyn-tries-clojure.core&quot;} {:command &quot;(and false true \&quot;red\&quot;)&quot;, :offset 20, :ns &quot;carolyn-tries-clojure.core&quot;} {:command &quot;(and true \&quot;red\&quot;)&quot;, :offset 5, :ns &quot;carolyn-tries-clojure.core&quot;} {:command &quot;(or true \&quot;red\&quot; \&quot;pink\&quot;)&quot;, :offset 20, :ns &quot;carolyn-tries-clojure.core&quot;} {:command &quot;(or false false nil)&quot;, :offset 19, :ns &quot;carolyn-tries-clojure.core&quot;} {:command &quot;(or false false false)&quot;, :offset 21, :ns &quot;carolyn-tries-clojure.core&quot;} {:command &quot;(or nil false false)&quot;, :offset 7, :ns &quot;carolyn-tries-clojure.core&quot;} {:command &quot;(and \&quot;returns\&quot; \&quot;first\&quot; false \&quot;value\&quot;)&quot;, :offset 35, :ns &quot;carolyn-tries-clojure.core&quot;} {:command &quot;(or \&quot;returns\&quot; \&quot;first\&quot; false \&quot;value\&quot;)&quot;, :offset 3, :ns &quot;carolyn-tries-clojure.core&quot;} {:command &quot;(and \&quot;returns\&quot; \&quot;first\&quot; \&quot;value\&quot;)&quot;, :offset 22, :ns &quot;carolyn-tries-clojure.core&quot;} {:command &quot;(or \&quot;returns\&quot; \&quot;first\&quot; \&quot;value\&quot;)&quot;, :offset 3, :ns &quot;carolyn-tries-clojure.core&quot;} {:command &quot;(or (= 1 2) \&quot;first\&quot; nil \&quot;value\&quot;)&quot;, :offset 24, :ns &quot;carolyn-tries-clojure.core&quot;} {:command &quot;(and (= 1 2) \&quot;first\&quot; nil \&quot;value\&quot;)&quot;, :offset 4, :ns &quot;carolyn-tries-clojure.core&quot;} {:command &quot;(def :namey-names [\&quot;name1\&quot; \&quot;name2\&quot;])&quot;, :offset 33, :ns &quot;carolyn-tries-clojure.core&quot;} {:command &quot;(def namey-names [\&quot;name1\&quot; \&quot;name2\&quot;])&quot;, :offset 5, :ns &quot;carolyn-tries-clojure.core&quot;} {:command &quot;(println namey-names)&quot;, :offset 20, :ns &quot;carolyn-tries-clojure.core&quot;} {:command &quot;(def severity :mild)&quot;, :offset 20, :ns &quot;carolyn-tries-clojure.core&quot;} {:command &quot;(def error-message \&quot;its a disaster! we're\&quot;)&quot;, :offset 43, :ns &quot;carolyn-tries-clojure.core&quot;} {:command &quot;(if (= severity :mild)\n  (def error-message (str error-message \&quot;mildly inconvenienced\&quot;))\n  (def error-message (str error-message \&quot;doomed\&quot;))\n  )&quot;, :offset 143, :ns &quot;carolyn-tries-clojure.core&quot;} {:command &quot;(println error-message)&quot;, :offset 22, :ns &quot;carolyn-tries-clojure.core&quot;} {:command &quot;(defn error-message\n  [severity]\n  (str \&quot;first bit\&quot;)\n    (if (= severity :mild)\n      \&quot; mild\&quot;\n      \&quot; not mild\&quot;))&quot;, :offset 113, :ns &quot;carolyn-tries-clojure.core&quot;} {:command &quot;(error-message :mild)&quot;, :offset 21, :ns &quot;carolyn-tries-clojure.core&quot;} {:command &quot;(error-message :nnn)&quot;, :offset 19, :ns &quot;carolyn-tries-clojure.core&quot;} {:command &quot;1/5&quot;, :offset 3, :ns &quot;carolyn-tries-clojure.core&quot;} {:command &quot;\&quot;\\\&quot;escaped\&quot;&quot;, :offset 11, :ns &quot;carolyn-tries-clojure.core&quot;} {:command &quot;(println \&quot;\\\&quot;esc\&quot;)&quot;, :offset 15, :ns &quot;carolyn-tries-clojure.core&quot;} {:command &quot;{:first-name \&quot;Carolyn\&quot; :last-name \&quot;Biggar\&quot;}&quot;, :offset 41, :ns &quot;carolyn-tries-clojure.core&quot;} {:command &quot;(get {:first-name \&quot;Carolyn\&quot; :last-name \&quot;Biggar\&quot;} :last-name) &quot;, :offset 59, :ns &quot;carolyn-tries-clojure.core&quot;} {:command &quot;(get {:first-name \&quot;Carolyn\&quot; :last-name \&quot;Biggar\&quot;} :last-name \&quot;Stewart\&quot;) &quot;, :offset 68, :ns &quot;carolyn-tries-clojure.core&quot;} {:command &quot;(get {:first-name \&quot;Carolyn\&quot; :last-name \&quot;Biggar\&quot;} :not-my-name \&quot;Stewart\&quot;) &quot;, :offset 61, :ns &quot;carolyn-tries-clojure.core&quot;} {:command &quot;(get-in {:first-name \&quot;Carolyn\&quot; :last-name \&quot;Biggar\&quot; :address {:house-num 17 :street-name \&quot;Main Street\&quot;}} [:address :house-num]) &quot;, :offset 124, :ns &quot;carolyn-tries-clojure.core&quot;} {:command &quot;(:last-name {:first-name \&quot;Carolyn\&quot; :last-name \&quot;Biggar\&quot; :address {:house-num 17 :street-name \&quot;Main Street\&quot;}}) &quot;, :offset 107, :ns &quot;carolyn-tries-clojure.core&quot;} {:command &quot;(:last-name {:first-name \&quot;Carolyn\&quot; :last-name \&quot;Biggar\&quot; :address {:house-num 17 :street-name \&quot;Main Street\&quot;}} \&quot;not found\&quot;) &quot;, :offset 118, :ns &quot;carolyn-tries-clojure.core&quot;} {:command &quot;(:last-namez {:first-name \&quot;Carolyn\&quot; :last-name \&quot;Biggar\&quot; :address {:house-num 17 :street-name \&quot;Main Street\&quot;}} \&quot;not found\&quot;) &quot;, :offset 12, :ns &quot;carolyn-tries-clojure.core&quot;} {:command &quot;(get [\&quot;x\&quot; \&quot;y\&quot; \&quot;z\&quot;] 1\n     )&quot;, :offset 26, :ns &quot;carolyn-tries-clojure.core&quot;} {:command &quot;(get [\&quot;x\&quot;  {:house-num 17 :street-name \&quot;Main Street\&quot;} \&quot;z\&quot;] 1)&quot;, :offset 53, :ns &quot;carolyn-tries-clojure.core&quot;} {:command &quot;(get-in [\&quot;x\&quot;  {:house-num 17 :street-name \&quot;Main Street\&quot;} \&quot;z\&quot;]  [1 :street-name] )&quot;, :offset 80, :ns &quot;carolyn-tries-clojure.core&quot;} {:command &quot;(1 [\&quot;x\&quot;  {:house-num 17 :street-name \&quot;Main Street\&quot;} \&quot;z\&quot;] )&quot;, :offset 3, :ns &quot;carolyn-tries-clojure.core&quot;} {:command &quot;(conj [0 1] 2 3)&quot;, :offset 15, :ns &quot;carolyn-tries-clojure.core&quot;} {:command &quot;(conj [0 1] [2 3])&quot;, :offset 16, :ns &quot;carolyn-tries-clojure.core&quot;} {:command &quot;'(0 1 2)&quot;, :offset 7, :ns &quot;carolyn-tries-clojure.core&quot;} {:command &quot;(nth (\&quot;x\&quot; \&quot;y\&quot; \&quot;z\&quot;) 1)&quot;, :offset 20, :ns &quot;carolyn-tries-clojure.core&quot;} {:command &quot;(nth '(\&quot;x\&quot; \&quot;y\&quot; \&quot;z\&quot;) 1)&quot;, :offset 6, :ns &quot;carolyn-tries-clojure.core&quot;} {:command &quot;conj '(1 2) 4 5 &quot;, :offset 16, :ns &quot;carolyn-tries-clojure.core&quot;} {:command &quot;( conj '(1 2) 4 5 )&quot;, :offset 4, :ns &quot;carolyn-tries-clojure.core&quot;} {:command &quot;#{\&quot;x\&quot; 1\n  1}&quot;, :offset 11, :ns &quot;carolyn-tries-clojure.core&quot;} {:command &quot;#{\&quot;x\&quot; 1 1}&quot;, :offset 8, :ns &quot;carolyn-tries-clojure.core&quot;} {:command &quot;(hash-set 1 1 1 1)&quot;, :offset 17, :ns &quot;carolyn-tries-clojure.core&quot;} {:command &quot;(conj (hash-set 1 1 2 3) 2)&quot;, :offset 26, :ns &quot;carolyn-tries-clojure.core&quot;} {:command &quot;(hash-set [1 1 2 2 ])&quot;, :offset 19, :ns &quot;carolyn-tries-clojure.core&quot;} {:command &quot;(set [1 1 2 2 ])&quot;, :offset 1, :ns &quot;carolyn-tries-clojure.core&quot;} {:command &quot;(get #{1 3} 3)&quot;, :offset 13, :ns &quot;carolyn-tries-clojure.core&quot;} {:command &quot;(get #{1 3} 2\n     )&quot;, :offset 19, :ns &quot;carolyn-tries-clojure.core&quot;} {:command &quot;(contains? #{1 3} 3)&quot;, :offset 10, :ns &quot;carolyn-tries-clojure.core&quot;} {:command &quot;(contains? #{1 3} 4)&quot;, :offset 19, :ns &quot;carolyn-tries-clojure.core&quot;}], :remote []}}</component>
  <component name="RunDashboard">
    <option name="ruleStates">
      <list>
        <RuleState>
          <option name="name" value="ConfigurationTypeDashboardGroupingRule" />
        </RuleState>
        <RuleState>
          <option name="name" value="StatusDashboardGroupingRule" />
        </RuleState>
      </list>
    </option>
  </component>
  <component name="RunManager" selected="Clojure Application.core_test">
    <configuration default="true" type="#org.jetbrains.idea.devkit.run.PluginConfigurationType">
      <module name="" />
      <option name="VM_PARAMETERS" value="-Xmx512m -Xms256m -XX:MaxPermSize=250m -ea" />
      <option name="PROGRAM_PARAMETERS" />
      <predefined_log_file enabled="true" id="idea.log" />
      <method v="2">
        <option name="Make" enabled="true" />
      </method>
    </configuration>
    <configuration default="true" type="Applet">
      <option name="POLICY_FILE" value="$APPLICATION_HOME_DIR$/bin/appletviewer.policy" />
      <method v="2">
        <option name="Make" enabled="true" />
      </method>
    </configuration>
    <configuration default="true" type="Application" factoryName="Application">
      <option name="WORKING_DIRECTORY" value="$PROJECT_DIR$" />
      <method v="2">
        <option name="Make" enabled="true" />
      </method>
    </configuration>
    <configuration name="Lein REPL" type="ClojureREPL" factoryName="Local" activateToolWindowBeforeRun="false">
      <module name="carolyn-tries-clojure" />
      <setting name="replType" value="NREPL" />
      <setting name="execution" value="LEININGEN" />
      <setting name="jvmArgs" value="" />
      <setting name="parameters" value="" />
      <setting name="workingDir" value="$PROJECT_DIR$" />
      <setting name="profiles" value="" />
      <setting name="aliases" value="" />
      <method v="2" />
    </configuration>
    <configuration default="true" type="ClojureREPL" factoryName="Local" activateToolWindowBeforeRun="false">
      <setting name="replType" value="NREPL" />
      <setting name="execution" value="LEININGEN" />
      <module name="" />
      <setting name="jvmArgs" value="" />
      <setting name="parameters" value="" />
      <setting name="workingDir" value="" />
      <setting name="profiles" value="" />
      <setting name="aliases" value="" />
      <method v="2" />
    </configuration>
    <configuration default="true" type="ClojureREPL" factoryName="Remote" activateToolWindowBeforeRun="false">
      <setting name="host" value="" />
      <setting name="port" value="0" />
      <setting name="replType" value="0" />
      <module name="" />
      <method v="2" />
    </configuration>
    <configuration name="carolyn-tries-clojure.core-test" type="ClojureScriptRunConfiguration" factoryName="Clojure Script" temporary="true">
      <module name="carolyn-tries-clojure" />
      <setting name="path" value="$PROJECT_DIR$/test/carolyn_tries_clojure/core_test.clj" />
      <setting name="namespace" value="" />
      <setting name="execution" value="INTELLIJ" />
      <setting name="profiles" value="" />
      <setting name="aliases" value="" />
      <setting name="vmparams" value="" />
      <setting name="params" value="" />
      <setting name="workDir" value="$PROJECT_DIR$/test/carolyn_tries_clojure" />
      <method v="2" />
    </configuration>
    <configuration name="carolyn-tries-clojure.core" type="ClojureScriptRunConfiguration" factoryName="Clojure Script" temporary="true">
      <module name="carolyn-tries-clojure" />
      <setting name="path" value="" />
      <setting name="namespace" value="carolyn-tries-clojure.core" />
      <setting name="execution" value="INTELLIJ" />
      <setting name="profiles" value="" />
      <setting name="aliases" value="" />
      <setting name="vmparams" value="" />
      <setting name="params" value="" />
      <setting name="workDir" value="$PROJECT_DIR$" />
      <method v="2" />
    </configuration>
    <configuration name="core_test" type="ClojureScriptRunConfiguration" factoryName="Clojure Script" temporary="true">
      <module name="carolyn-tries-clojure" />
      <setting name="path" value="$PROJECT_DIR$/test/carolyn_tries_clojure/core_test.clj" />
      <setting name="namespace" value="" />
      <setting name="execution" value="INTELLIJ" />
      <setting name="profiles" value="" />
      <setting name="aliases" value="" />
      <setting name="vmparams" value="" />
      <setting name="params" value="" />
      <setting name="workDir" value="$PROJECT_DIR$/test/carolyn_tries_clojure" />
      <method v="2" />
    </configuration>
    <configuration name="test" type="ClojureScriptRunConfiguration" factoryName="Clojure Script" temporary="true">
      <module name="carolyn-tries-clojure" />
      <setting name="path" value="$PROJECT_DIR$/src/carolyn_tries_clojure/test.clj" />
      <setting name="namespace" value="" />
      <setting name="execution" value="INTELLIJ" />
      <setting name="profiles" value="" />
      <setting name="aliases" value="" />
      <setting name="vmparams" value="" />
      <setting name="params" value="" />
      <setting name="workDir" value="$PROJECT_DIR$/src/carolyn_tries_clojure" />
      <method v="2" />
    </configuration>
    <configuration default="true" type="JUnit" factoryName="JUnit">
      <option name="TEST_OBJECT" value="class" />
      <option name="WORKING_DIRECTORY" value="$MODULE_DIR$" />
      <method v="2">
        <option name="Make" enabled="true" />
      </method>
    </configuration>
    <configuration default="true" type="TestNG">
      <option name="TEST_OBJECT" value="CLASS" />
      <option name="WORKING_DIRECTORY" value="$MODULE_DIR$" />
      <properties />
      <listeners />
      <method v="2">
        <option name="Make" enabled="true" />
      </method>
    </configuration>
    <list>
      <item itemvalue="Clojure Application.carolyn-tries-clojure.core" />
      <item itemvalue="Clojure REPL.Lein REPL" />
      <item itemvalue="Clojure Application.test" />
      <item itemvalue="Clojure Application.core_test" />
      <item itemvalue="Clojure Application.carolyn-tries-clojure.core-test" />
    </list>
    <recent_temporary>
      <list>
        <item itemvalue="Clojure Application.core_test" />
        <item itemvalue="Clojure Application.carolyn-tries-clojure.core-test" />
        <item itemvalue="Clojure Application.test" />
        <item itemvalue="Clojure Application.carolyn-tries-clojure.core" />
      </list>
    </recent_temporary>
  </component>
  <component name="SvnConfiguration">
    <configuration />
  </component>
  <component name="ToolWindowManager">
    <frame x="-1" y="-11" width="1922" height="1092" extended-state="6" />
    <editor active="true" />
    <layout>
      <window_info active="true" content_ui="combo" id="Project" order="0" visible="true" weight="0.23319103" />
      <window_info id="Structure" order="1" side_tool="true" weight="0.25" />
      <window_info id="Designer" order="2" />
      <window_info id="Favorites" order="3" side_tool="true" />
      <window_info anchor="bottom" id="Message" order="0" />
      <window_info anchor="bottom" id="Find" order="1" sideWeight="0.4994664" weight="0.3295099" />
      <window_info anchor="bottom" id="Run" order="2" sideWeight="0.4967983" visible="true" weight="0.45046923" />
      <window_info anchor="bottom" id="Debug" order="3" weight="0.4" />
      <window_info anchor="bottom" id="Cvs" order="4" weight="0.25" />
      <window_info anchor="bottom" id="Inspection" order="5" weight="0.4" />
      <window_info anchor="bottom" id="TODO" order="6" />
      <window_info anchor="bottom" id="Docker" order="7" show_stripe_button="false" />
      <window_info anchor="bottom" id="Version Control" order="8" />
      <window_info anchor="bottom" id="Terminal" order="9" />
      <window_info anchor="bottom" id="Event Log" order="10" side_tool="true" weight="0.3295099" />
      <window_info anchor="bottom" x="0" y="24" width="1920" height="1056" id="REPL" maximized="true" order="11" sideWeight="0.5032017" side_tool="true" visible="true" weight="0.45046923" />
      <window_info anchor="right" id="Commander" order="0" weight="0.4" />
      <window_info anchor="right" id="Ant Build" order="1" weight="0.25" />
      <window_info anchor="right" content_ui="combo" id="Hierarchy" order="2" weight="0.25" />
      <window_info anchor="right" id="Maven" order="3" />
      <window_info anchor="right" id="Leiningen" order="4" sideWeight="0.28050053" weight="0.6723586" />
      <window_info anchor="right" id="Palette&#9;" order="5" />
    </layout>
  </component>
  <component name="editorHistoryManager">
    <entry file="file://$PROJECT_DIR$/carolyn-tries-clojure.iml">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="170">
          <caret line="10" column="9" lean-forward="true" selection-start-line="10" selection-start-column="9" selection-end-line="10" selection-end-column="9" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/carolyn_tries_clojure/test.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="51">
          <caret line="3" selection-start-line="3" selection-end-line="3" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/README.md">
      <provider selected="true" editor-type-id="split-provider[text-editor;markdown-preview-editor]">
        <state split_layout="SPLIT">
          <first_editor relative-caret-position="221">
            <caret line="13" lean-forward="true" selection-start-line="13" selection-end-line="13" />
          </first_editor>
          <second_editor />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/project.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="136">
          <caret line="8" column="35" lean-forward="true" selection-start-line="8" selection-start-column="35" selection-end-line="8" selection-end-column="35" />
        </state>
      </provider>
    </entry>
    <entry file="jar://$MAVEN_REPOSITORY$/org/clojure/clojure/1.10.0/clojure-1.10.0.jar!/clojure/main.class">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="344">
          <caret line="33" selection-start-line="33" selection-end-line="33" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/test/carolyn_tries_clojure/core_test.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="68">
          <caret line="4" lean-forward="true" selection-start-line="4" selection-end-line="4" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/carolyn_tries_clojure/core.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="204">
          <caret line="12" column="24" selection-start-line="12" selection-start-column="24" selection-end-line="12" selection-end-column="24" />
        </state>
      </provider>
    </entry>
  </component>
  <component name="masterDetails">
    <states>
      <state key="ProjectJDKs.UI">
        <settings>
          <last-edited>1.8</last-edited>
          <splitter-proportions>
            <option name="proportions">
              <list>
                <option value="0.2" />
              </list>
            </option>
          </splitter-proportions>
        </settings>
      </state>
    </states>
  </component>
</project>